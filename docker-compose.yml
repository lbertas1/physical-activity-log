version: '3.3'

services:

  physical-activity-log-eureka:
    image: physical-activity-log-eureka
    build:
      context: ./physical-activity-log-eureka
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8761:8761"
    networks:
      - physical-activity-log-network

  physical-activity-log-service:
    image: physical-activity-log-service
    build:
      context: ./physical-activity-log-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8100"
    depends_on:
      - physical-activity-log-eureka
    networks:
      - physical-activity-log-network
      
  physical-activity-log-api-gateway:
    image: physical-activity-log-api-gateway
    build:
      context: ./physical-activity-log-api-gateway
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8890:8890"
    depends_on:
      - physical-activity-log-eureka
    networks:
      - physical-activity-log-network
      
  physical-activity-log-config-service:
    image: physical-activity-log-config-service
    build:
      context: ./physical-activity-log-config-service
      dockerfile: Dockerfile
    restart: always
    ports:
      - "8889:8889"
    networks:
      - physical-activity-log-network
      
  my-spring-cloud-config-server:
    image: my-spring-cloud-config-server
    build:
      context: ./my-spring-cloud-config-server
      dockerfile: Dockerfile
    restart: always
    ports:
      # - <port_w_localhost>:<port_w_docker>
      - "8888:8888"
    networks:
      - physical-activity-log-network
      
  micro-service-3:
    image: micro-service-3
    build:
      context: ./micro-service-3
      dockerfile: Dockerfile
    restart: always
    ports:
      # - <port_w_localhost>:<port_w_docker>
      - "8085:8085"
    depends_on:
      - physical-activity-log-eureka
    networks:
      - physical-activity-log-network
      
networks:
  physical-activity-log-network:



# zbudowac kazdy projekt
# >> mvn clean install -DskipTests

# z poziomu docker-compose.yaml wywolaj:
# >> docker-compose up -d --build
# mozesz podgladac logs
# >> docker-compose logs -f

# kiedy chcesz uruchomic pare instancji jednego service naraz to zastosuj --scale
# >> docker-compose up -d --build --scale grupowe-users-service=4

# zatrzymanie kontenerow
# >> docker-compose stop

# sprzatanie po kontenerach
# >> docker system prune
